generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  id                 String      @id @default(cuid())
  name               String
  imageUrl           String[]
  productDescription String
  categoryName       String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  price              Decimal     @default(0)
  details            String      @default("")
  highlights         String[]
  reviews            Decimal     @default(0)
  sizes              String[]    @default(["S", "M", "L"])
  stockQuantity      Int         @default(0)
  colors             String[]
  displayImage       String
  rating             Int         @default(0)
  usersPurchased     Int         @default(0)
  cartItems          CartItems[]
  category           Category    @relation(fields: [categoryName], references: [name])

  @@index([categoryName])
}

model Users {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  hashedPassword String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profileUrl     String
  role           String    @default("buyer")
  locations      Address[]
  cart           Cart?
}

model Cart {
  id        String      @id @default(cuid())
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItem  CartItems[]
}

model CartItems {
  id        String   @id @default(cuid())
  cartId    String
  price     Decimal
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Category {
  id            String     @id @default(cuid())
  name          String     @unique
  description   String
  createdAt     DateTime   @default(now())
  parentId      String?
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("Subcategories")
  products      Products[]
}

model Address {
  id           String   @id @default(uuid())
  name         String
  mobileNumber String
  state        String
  pincode      String
  city         String
  address1     String
  address2     String
  landmark     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String?
  user         Users?   @relation(fields: [userId], references: [id])
}
